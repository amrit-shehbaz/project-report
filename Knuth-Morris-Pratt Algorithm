def compute_kmp_table(pattern):
    """ Compute the partial match table (KMP "failure function") for a given pattern. """
    m = len(pattern)
    kmp_table = [0] * m
    j = 0

    # The position 0 in the KMP table is always 0 because there's no proper prefix which
    # is also a suffix for a string of length 1.
    for i in range(1, m):
        while (j > 0 and pattern[i] != pattern[j]):
            j = kmp_table[j - 1]
        
        if pattern[i] == pattern[j]:
            j += 1
            kmp_table[i] = j
        else:
            kmp_table[i] = 0
    
    return kmp_table

def kmp_search(text, pattern):
    """ Search for occurrences of the pattern in the text using the KMP algorithm. """
    n = len(text)
    m = len(pattern)
    if m == 0:
        return 0  # Immediate match if pattern is empty

    kmp_table = compute_kmp_table(pattern)
    matches = []

    i = 0  # index for text
    j = 0  # index for pattern
    while i < n:
        if text[i] == pattern[j]:
            i += 1
            j += 1
            if j == m:
                # A match was found
                matches.append(i - j)
                j = kmp_table[j - 1]
        else:
            if j != 0:
                j = kmp_table[j - 1]
            else:
                i += 1

    return matches

# Example usage
text = "ABABDABACDABABCABAB"
pattern = "ABABCABAB"
matches = kmp_search(text, pattern)
print("Pattern found at positions:", matches)
# output: Pattern found at positions: [10]
