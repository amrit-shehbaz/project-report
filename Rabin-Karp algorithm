def rabin_karp(text, pattern):
    # Base value for the rolling hash function
    base = 256
    # A large prime number to take modulo with for hash calculation
    prime = 101
    n = len(text)
    m = len(pattern)
    # The highest power of base used in the hash function
    high_base = pow(base, m-1) % prime

    # Initial hash values for pattern and text
    pattern_hash = 0
    text_hash = 0

    # Calculate the hash value for the pattern and the first 'window' of the text
    for i in range(m):
        pattern_hash = (base * pattern_hash + ord(pattern[i])) % prime
        text_hash = (base * text_hash + ord(text[i])) % prime

    # List to store the positions of matches
    matches = []

    # Slide the pattern over the text
    for i in range(n - m + 1):
        # If the hash values match, then only check the characters one by one
        if pattern_hash == text_hash:
            if text[i:i+m] == pattern:
                matches.append(i)
        
        # Calculate the hash for the next 'window' of text
        if i < n - m:
            text_hash = (text_hash - ord(text[i]) * high_base) * base + ord(text[i + m])
            text_hash = text_hash % prime
            # Convert negative hash value to positive by adding prime
            if text_hash < 0:
                text_hash += prime

    return matches

# Example usage:
text = "ABCDABCDABCD"
pattern = "ABCD"
print("Pattern found at positions:", rabin_karp(text, pattern))
# output Pattern found at positions: [0, 4, 8]
